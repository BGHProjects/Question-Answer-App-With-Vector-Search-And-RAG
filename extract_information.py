from pymongo import MongoClient
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.vectorstores import MongoDBAtlasVectorSearch
from langchain.llms import OpenAI
from langchain.chains import RetrievalQA
import gradio as gr
from gradio.themes.base import Base
import key_param

# Prepare the collection
client = MongoClient(key_param.MONGO_URI)
dbName = "langchain_demo"
collectionName = "collection_of_text_blobs"
collection = client[dbName][collectionName]

# Generate the embeddings
embeddings = OpenAIEmbeddings(openai_api_key=key_param.openai_api_key)

# Access the vector store
vectorStore = MongoDBAtlasVectorSearch(embeddings, collection=collection)

def query_data(query):
    """
    Process query and return relevant information
    """

    # Transform input into a vector
    docs = vectorStore.similarity_search(query, K=1)
    as_output = docs[0].page_content

    # Perform vector search
    llm = OpenAI(openai_api_key=key_param.openai_api_key, temperature=0)
    retriever = vectorStore.as_retriever()
    qa = RetrievalQA.from_chain_type(llm, chain_type="stuff",retriever=retriever)
    retriever_output = qa.run(query)

    return as_output, retriever_output

# Gradio UI
with gr.Blocks(theme=Base(), title="Question Answering App using Vector Search + RAG") as demo:
    gr.Markdown(
        """
        # Question Answering App using Atlas Vector Search + RAG Architecture
        """
    )
    textbox = gr.Textbox(label="Enter your Question:")
    with gr.Row():
        button = gr.Button("Submit", variant="primary")
    with gr.Column():
        output = gr.Textbox(lines=1, max_lines=10, label="Output generated by chaining Atlas Vector Search to Langchain's RetrieverQA + OpenAI LLM:")

    button.click(query_data, textbox, outputs=[output])

demo.launch()

